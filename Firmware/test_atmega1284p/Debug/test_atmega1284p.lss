
test_atmega1284p.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         000000a8  00800100  000008d4  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001a8  008001a8  00000a10  2**0
                  ALLOC
  3 .stab         00002118  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001526  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000404e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004060  2**2
                  CONTENTS, READONLY

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	47 c0       	rjmp	.+142    	; 0x90 <__dtors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
  1a:	00 00       	nop
  1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
  1e:	00 00       	nop
  20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6b c0       	rjmp	.+214    	; 0x104 <__vector_11>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	54 c0       	rjmp	.+168    	; 0xde <__bad_interrupt>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	bb c0       	rjmp	.+374    	; 0x1c8 <__vector_20>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	be c0       	rjmp	.+380    	; 0x1ee <__vector_28>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	a7 00       	.word	0x00a7	; ????

0000008e <__ctors_end>:
  8e:	b3 00       	.word	0x00b3	; ????

00000090 <__dtors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d0 e4       	ldi	r29, 0x40	; 64
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e4 ed       	ldi	r30, 0xD4	; 212
  a4:	f8 e0       	ldi	r31, 0x08	; 8
  a6:	00 e0       	ldi	r16, 0x00	; 0
  a8:	0b bf       	out	0x3b, r16	; 59
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x14>
  ac:	07 90       	elpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a8 3a       	cpi	r26, 0xA8	; 168
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x10>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a8 ea       	ldi	r26, 0xA8	; 168
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	ae 3b       	cpi	r26, 0xBE	; 190
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>

000000c6 <__do_global_ctors>:
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	c7 e4       	ldi	r28, 0x47	; 71
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <__do_global_ctors+0xe>
  ce:	21 97       	sbiw	r28, 0x01	; 1
  d0:	fe 01       	movw	r30, r28
  d2:	be d2       	rcall	.+1404   	; 0x650 <__tablejump2__>
  d4:	c6 34       	cpi	r28, 0x46	; 70
  d6:	d1 07       	cpc	r29, r17
  d8:	d1 f7       	brne	.-12     	; 0xce <__do_global_ctors+0x8>
  da:	3a d2       	rcall	.+1140   	; 0x550 <main>
  dc:	ef c3       	rjmp	.+2014   	; 0x8bc <__do_global_dtors>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <_ZN3FSMC1Ev>:

Usart FSM::usart0(0,Usart::BR_115200);
Usart FSM::usart1(1,Usart::BR_115200);


FSM::FSM(){
  e0:	c8 d0       	rcall	.+400    	; 0x272 <_ZN10esp8266_12C1Ev>
		TIMSK2 |= _BV(TOIE2);				// enable overflow interrupt
  e2:	e0 e7       	ldi	r30, 0x70	; 112
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
		TCNT2 = 0;
  ec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		TCCR2B = _BV(CS22) | _BV(CS20); // prescaler for overload interrupt each 1 second : CS2[2:0]=101;
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
		ASSR |=  _BV(AS2);					// Set the bit AS2 in the ASSR register to clock the timer 2 from the external crystal
  f6:	e6 eb       	ldi	r30, 0xB6	; 182
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24

	inline void disable(){PORTD &= ~_BV(4);};

	// LDO enable pin

	inline void LDO_enable(){PORTD |= _BV(5);};
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	08 95       	ret

00000104 <__vector_11>:
/**
 * \brief the timer2 is use with an external 32.768 Hz crystal to provide a RTC
 *
 * At each timer2 overflow, the uint32 timestamp is incremented
 */
ISR(TIMER2_OVF_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
	FSM::timestamp++;
 116:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_ZN3FSM9timestampE>
 11a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 11e:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 122:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_ZN3FSM9timestampE>
 130:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 134:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 138:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_GLOBAL__sub_I__ZN3FSM9timestampE>:
#include "../lib/FSM.h"

/// @todo change timer2 for external RTC test
unsigned long int FSM::timestamp = 0;

Usart FSM::usart0(0,Usart::BR_115200);
 14e:	40 e1       	ldi	r20, 0x10	; 16
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8d ea       	ldi	r24, 0xAD	; 173
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e d0       	rcall	.+28     	; 0x176 <_ZN5UsartC1Ehj>
Usart FSM::usart1(1,Usart::BR_115200);
 15a:	40 e1       	ldi	r20, 0x10	; 16
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	88 ea       	ldi	r24, 0xA8	; 168
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	08 c0       	rjmp	.+16     	; 0x176 <_ZN5UsartC1Ehj>

00000166 <_GLOBAL__sub_D__ZN3FSM9timestampE>:
 166:	88 ea       	ldi	r24, 0xA8	; 168
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	03 d0       	rcall	.+6      	; 0x172 <_ZN5UsartD1Ev>
#include "../lib/FSM.h"

/// @todo change timer2 for external RTC test
unsigned long int FSM::timestamp = 0;

Usart FSM::usart0(0,Usart::BR_115200);
 16c:	8d ea       	ldi	r24, 0xAD	; 173
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	00 c0       	rjmp	.+0      	; 0x172 <_ZN5UsartD1Ev>

00000172 <_ZN5UsartD1Ev>:
			break;
	}

}

Usart::~Usart() {
 172:	08 95       	ret

00000174 <_ZN5UsartD0Ev>:
	// TODO Auto-generated destructor stub
}
 174:	69 c2       	rjmp	.+1234   	; 0x648 <_ZdlPv>

00000176 <_ZN5UsartC1Ehj>:
unsigned char Usart::flag_rx0 = 0;
char Usart::data_udr1 = 0;
unsigned char Usart::flag_rx1 = 0;


Usart::Usart(unsigned char usart, unsigned int baudrate):m_usart(usart),m_baudrate(baudrate) {
 176:	fc 01       	movw	r30, r24
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	80 83       	st	Z, r24
 180:	62 83       	std	Z+2, r22	; 0x02
 182:	54 83       	std	Z+4, r21	; 0x04
 184:	43 83       	std	Z+3, r20	; 0x03
	// TODO Auto-generated constructor stub

	switch (m_usart) {
 186:	66 23       	and	r22, r22
 188:	19 f0       	breq	.+6      	; 0x190 <_ZN5UsartC1Ehj+0x1a>
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	79 f0       	breq	.+30     	; 0x1ac <_ZN5UsartC1Ehj+0x36>
 18e:	08 95       	ret
		case 0:
			UBRR0 = m_baudrate; // set baud rate
 190:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 194:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

			UCSR0A = _BV(U2X0); // for the baud rate setting
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

			UCSR0B = _BV(RXCIE0) | _BV(RXEN0) |_BV(TXEN0); //enable receiver and transmitter
 19e:	88 e9       	ldi	r24, 0x98	; 152
 1a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			UCSR0C =  _BV(UCSZ01) | _BV(UCSZ00);	// Set frame format : 8data 1stop bit
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

			break;
 1aa:	08 95       	ret
		case 1:
			UBRR1 = baudrate; // set baud rate
 1ac:	50 93 cd 00 	sts	0x00CD, r21	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1b0:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

			UCSR1A = _BV(U2X0); // for the baud rate setting
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

			UCSR1B = _BV(RXCIE1) | _BV(RXEN1) |_BV(TXEN1); //enable receiver and transmitter
 1ba:	88 e9       	ldi	r24, 0x98	; 152
 1bc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
			UCSR1C =  _BV(UCSZ11) | _BV(UCSZ10);	// Set frame format : 8data 1stop bit
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 1c6:	08 95       	ret

000001c8 <__vector_20>:
Usart::~Usart() {
	// TODO Auto-generated destructor stub
}

ISR(USART0_RX_vect)							//sous routine d'interruption lors d'une reception
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
	Usart::data_udr0 = UDR0;						//récupération du registre de donnée UDR0 dans la variable globale data_udr0
 1d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d8:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <_ZN5Usart9data_udr0E>
	Usart::flag_rx0 = 1;					//mise à 1 du drapeau de reception pour interruption
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <_ZN5Usart8flag_rx0E>
}
 1e2:	8f 91       	pop	r24
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_28>:

ISR(USART1_RX_vect)							//sous routine d'interruption lors d'une reception
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	8f 93       	push	r24
	Usart::data_udr1 = UDR1;						//récupération du registre de donnée UDR0 dans la variable globale data_udr0
 1fa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1fe:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_ZN5Usart9data_udr1E>
	Usart::flag_rx1 = 1;					//mise à 1 du drapeau de reception pour interruption
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_ZN5Usart8flag_rx1E>
}
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <_ZN5Usart3setEc>:



void Usart::set(char character){
	switch (m_usart) {
 214:	fc 01       	movw	r30, r24
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	88 23       	and	r24, r24
 21a:	19 f0       	breq	.+6      	; 0x222 <_ZN5Usart3setEc+0xe>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	41 f0       	breq	.+16     	; 0x230 <_ZN5Usart3setEc+0x1c>
 220:	08 95       	ret
	case 0:
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
 222:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	85 ff       	sbrs	r24, 5
 228:	fc cf       	rjmp	.-8      	; 0x222 <_ZN5Usart3setEc+0xe>
			;
		/* Put data into buffer, sends the data */
		UDR0 = character;
 22a:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 22e:	08 95       	ret
		break;
	case 1:
		/* Wait for empty transmit buffer */
		while ( !( UCSR1A & (1<<UDRE1)) )
 230:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 234:	85 ff       	sbrs	r24, 5
 236:	fc cf       	rjmp	.-8      	; 0x230 <_ZN5Usart3setEc+0x1c>
			;
		/* Put data into buffer, sends the data */
		UDR1 = character;
 238:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 23c:	08 95       	ret

0000023e <_ZN5Usart5printEPc>:
	default:
		break;
	}
}

void Usart::print(char* string){
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	7c 01       	movw	r14, r24
 24a:	8b 01       	movw	r16, r22
	uint8_t i = 0;
 24c:	c0 e0       	ldi	r28, 0x00	; 0

		while(*(string+i)!='\0')
 24e:	f8 01       	movw	r30, r16
 250:	ec 0f       	add	r30, r28
 252:	f1 1d       	adc	r31, r1
 254:	60 81       	ld	r22, Z
 256:	66 23       	and	r22, r22
 258:	21 f0       	breq	.+8      	; 0x262 <_ZN5Usart5printEPc+0x24>
		{
			set(*(string+i));			//envoi de caractère à la volée contenu dans les adresses de data (adresses incrémentée par i)
 25a:	c7 01       	movw	r24, r14
 25c:	db df       	rcall	.-74     	; 0x214 <_ZN5Usart3setEc>
			i++;								//tant que la data ne contient pas '\0'
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	f6 cf       	rjmp	.-20     	; 0x24e <_ZN5Usart5printEPc+0x10>
		}
}
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <_ZN10esp8266_12D1Ev>:
	DDRD |= 0xF0;
	PORTD = 0x00;

}

esp8266_12::~esp8266_12() {
 26e:	08 95       	ret

00000270 <_ZN10esp8266_12D0Ev>:

}
 270:	eb c1       	rjmp	.+982    	; 0x648 <_ZdlPv>

00000272 <_ZN10esp8266_12C1Ev>:
#include <avr/io.h>
#include <stdlib.h>

#include "../lib/FSM.h"

esp8266_12::esp8266_12() {
 272:	fc 01       	movw	r30, r24
 274:	82 e1       	ldi	r24, 0x12	; 18
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	91 83       	std	Z+1, r25	; 0x01
 27a:	80 83       	st	Z, r24
 27c:	8a e0       	ldi	r24, 0x0A	; 10
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	8e e1       	ldi	r24, 0x1E	; 30
 282:	83 83       	std	Z+3, r24	; 0x03
	// Define portD[4-7] as output
	DDRD |= 0xF0;
 284:	8a b1       	in	r24, 0x0a	; 10
 286:	80 6f       	ori	r24, 0xF0	; 240
 288:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 28a:	1b b8       	out	0x0b, r1	; 11
 28c:	08 95       	ret

0000028e <_ZN10esp8266_129test_initEv>:

void  esp8266_12::print(char *string){
	FSM::usart1.print(string);
}

void esp8266_12::test_init(){
 28e:	9f 92       	push	r9
 290:	af 92       	push	r10
 292:	bf 92       	push	r11
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	6c 01       	movw	r12, r24
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){
			//FSM::usart0.set(uart1_al+'0');FSM::usart0.print(" - ");
			FSM::usart0.print(uart1_array[uart1_al]);						// print string
		}// end of for

}
 2aa:	ad b6       	in	r10, 0x3d	; 61
 2ac:	be b6       	in	r11, 0x3e	; 62
	FSM::usart1.print(string);
}

void esp8266_12::test_init(){
	// local variables
	char uart1_array[NB_OF_STRING][NB_OF_CHAR] = {0};						// use to store uart module's initializing strings
 2ae:	fc 01       	movw	r30, r24
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	08 2f       	mov	r16, r24
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	22 81       	ldd	r18, Z+2	; 0x02
 2b8:	4d b7       	in	r20, 0x3d	; 61
 2ba:	5e b7       	in	r21, 0x3e	; 62
 2bc:	28 9f       	mul	r18, r24
 2be:	40 19       	sub	r20, r0
 2c0:	51 09       	sbc	r21, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	5e bf       	out	0x3e, r21	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	4d bf       	out	0x3d, r20	; 61
 2ce:	8d b7       	in	r24, 0x3d	; 61
 2d0:	9e b7       	in	r25, 0x3e	; 62
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	7c 01       	movw	r14, r24
 2d6:	ed b7       	in	r30, 0x3d	; 61
 2d8:	fe b7       	in	r31, 0x3e	; 62
 2da:	11 82       	std	Z+1, r1	; 0x01
 2dc:	80 0f       	add	r24, r16
 2de:	91 1f       	adc	r25, r17
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	58 2f       	mov	r21, r24
 2e4:	49 2f       	mov	r20, r25
 2e6:	21 30       	cpi	r18, 0x01	; 1
 2e8:	31 05       	cpc	r19, r1
 2ea:	61 f0       	breq	.+24     	; 0x304 <_ZN10esp8266_129test_initEv+0x76>
 2ec:	80 0f       	add	r24, r16
 2ee:	91 1f       	adc	r25, r17
 2f0:	e5 2f       	mov	r30, r21
 2f2:	f4 2f       	mov	r31, r20
 2f4:	e8 17       	cp	r30, r24
 2f6:	f9 07       	cpc	r31, r25
 2f8:	11 f0       	breq	.+4      	; 0x2fe <_ZN10esp8266_129test_initEv+0x70>
 2fa:	11 92       	st	Z+, r1
 2fc:	fb cf       	rjmp	.-10     	; 0x2f4 <_ZN10esp8266_129test_initEv+0x66>
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	31 09       	sbc	r19, r1
 302:	ef cf       	rjmp	.-34     	; 0x2e2 <_ZN10esp8266_129test_initEv+0x54>
 304:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char uart1_al = 0,uart1_ac = 0;								// index for lines and colunms
	char recording = 0;

		/** Waiting for the char 'E' first char of "EmonESP xxx string" **********/
		while(!recording){
			if(FSM::usart1.flag_rx1 && FSM::usart1.data_udr1 == 'E')		// Test if the new char is a 'E'
 306:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 30a:	88 23       	and	r24, r24
 30c:	69 f0       	breq	.+26     	; 0x328 <_ZN10esp8266_129test_initEv+0x9a>
 30e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_ZN5Usart9data_udr1E>
 312:	85 34       	cpi	r24, 0x45	; 69
 314:	49 f4       	brne	.+18     	; 0x328 <_ZN10esp8266_129test_initEv+0x9a>
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// if right save it in the first line, first column.
 316:	f7 01       	movw	r30, r14
 318:	e9 0f       	add	r30, r25
 31a:	f1 1d       	adc	r31, r1
 31c:	80 83       	st	Z, r24
				uart1_ac++;													// increase the column
 31e:	9f 5f       	subi	r25, 0xFF	; 255
				recording = 1;												// we can go starting record char
				FSM::usart1.flag_rx1 = 0;									// reset the flag
 320:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_ZN5Usart8flag_rx1E>
		while(!recording){
			if(FSM::usart1.flag_rx1 && FSM::usart1.data_udr1 == 'E')		// Test if the new char is a 'E'
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// if right save it in the first line, first column.
				uart1_ac++;													// increase the column
				recording = 1;												// we can go starting record char
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	01 c0       	rjmp	.+2      	; 0x32a <_ZN10esp8266_129test_initEv+0x9c>
 328:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	f5 e0       	ldi	r31, 0x05	; 5
 32c:	fa 95       	dec	r31
 32e:	f1 f7       	brne	.-4      	; 0x32c <_ZN10esp8266_129test_initEv+0x9e>
 330:	00 00       	nop
	char uart1_array[NB_OF_STRING][NB_OF_CHAR] = {0};						// use to store uart module's initializing strings
	unsigned char uart1_al = 0,uart1_ac = 0;								// index for lines and colunms
	char recording = 0;

		/** Waiting for the char 'E' first char of "EmonESP xxx string" **********/
		while(!recording){
 332:	88 23       	and	r24, r24
 334:	41 f3       	breq	.-48     	; 0x306 <_ZN10esp8266_129test_initEv+0x78>
 336:	80 e0       	ldi	r24, 0x00	; 0
			}
			_delay_us(1);													// If no an 'E', delay needs do not leave the loop empty (compilation optimization)
		}

		/** Record the 5 string from the wifi module *****************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){						// record the 5 strings
 338:	f6 01       	movw	r30, r12
 33a:	22 81       	ldd	r18, Z+2	; 0x02
 33c:	82 17       	cp	r24, r18
 33e:	70 f5       	brcc	.+92     	; 0x39c <_ZN10esp8266_129test_initEv+0x10e>
			while(recording){												// recording to find '\r' char, end of line
				if(FSM::usart1.flag_rx1)									// if new char comes
				{
					uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// Save it in the column
 340:	80 9f       	mul	r24, r16
 342:	a0 01       	movw	r20, r0
 344:	81 9f       	mul	r24, r17
 346:	50 0d       	add	r21, r0
 348:	11 24       	eor	r1, r1
		}

		/** Record the 5 string from the wifi module *****************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){						// record the 5 strings
			while(recording){												// recording to find '\r' char, end of line
				if(FSM::usart1.flag_rx1)									// if new char comes
 34a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 34e:	22 23       	and	r18, r18
 350:	81 f0       	breq	.+32     	; 0x372 <_ZN10esp8266_129test_initEv+0xe4>
				{
					uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// Save it in the column
 352:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <_ZN5Usart9data_udr1E>
 356:	f7 01       	movw	r30, r14
 358:	e9 0f       	add	r30, r25
 35a:	f1 1d       	adc	r31, r1
 35c:	e4 0f       	add	r30, r20
 35e:	f5 1f       	adc	r31, r21
 360:	30 83       	st	Z, r19
					if((uart1_array[uart1_al][uart1_ac] == '\r')) recording = 0;			// if the char is '\r', stop recording
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	3d 30       	cpi	r19, 0x0D	; 13
 366:	09 f4       	brne	.+2      	; 0x36a <_ZN10esp8266_129test_initEv+0xdc>
 368:	20 e0       	ldi	r18, 0x00	; 0
					uart1_ac++;													// increase the column
 36a:	9f 5f       	subi	r25, 0xFF	; 255
					FSM::usart1.flag_rx1 = 0;									// reset the flag
 36c:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 370:	01 c0       	rjmp	.+2      	; 0x374 <_ZN10esp8266_129test_initEv+0xe6>
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	35 e0       	ldi	r19, 0x05	; 5
 376:	3a 95       	dec	r19
 378:	f1 f7       	brne	.-4      	; 0x376 <_ZN10esp8266_129test_initEv+0xe8>
 37a:	00 00       	nop
			_delay_us(1);													// If no an 'E', delay needs do not leave the loop empty (compilation optimization)
		}

		/** Record the 5 string from the wifi module *****************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){						// record the 5 strings
			while(recording){												// recording to find '\r' char, end of line
 37c:	21 11       	cpse	r18, r1
 37e:	e5 cf       	rjmp	.-54     	; 0x34a <_ZN10esp8266_129test_initEv+0xbc>
				}
				_delay_us(1);												// needs do not leave the loop empty (compilation optimization)
			}// end of while


			uart1_array[uart1_al][uart1_ac] = '\0';							// add '\0' char, end of string
 380:	80 9f       	mul	r24, r16
 382:	90 01       	movw	r18, r0
 384:	81 9f       	mul	r24, r17
 386:	30 0d       	add	r19, r0
 388:	11 24       	eor	r1, r1
 38a:	f7 01       	movw	r30, r14
 38c:	e9 0f       	add	r30, r25
 38e:	f1 1d       	adc	r31, r1
 390:	e2 0f       	add	r30, r18
 392:	f3 1f       	adc	r31, r19
 394:	10 82       	st	Z, r1
			}
			_delay_us(1);													// If no an 'E', delay needs do not leave the loop empty (compilation optimization)
		}

		/** Record the 5 string from the wifi module *****************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){						// record the 5 strings
 396:	8e 5f       	subi	r24, 0xFE	; 254
				_delay_us(1);												// needs do not leave the loop empty (compilation optimization)
			}// end of while


			uart1_array[uart1_al][uart1_ac] = '\0';							// add '\0' char, end of string
			uart1_ac = 0;													// reset column number
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ce cf       	rjmp	.-100    	; 0x338 <_ZN10esp8266_129test_initEv+0xaa>
 39c:	91 2c       	mov	r9, r1
			uart1_al++;														// increase line number
			recording = 1;													// and restart recording
		}// end of for

		/** Print strings on uart0 ***********************************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){
 39e:	f6 01       	movw	r30, r12
 3a0:	82 81       	ldd	r24, Z+2	; 0x02
 3a2:	98 16       	cp	r9, r24
 3a4:	60 f4       	brcc	.+24     	; 0x3be <_ZN10esp8266_129test_initEv+0x130>
			//FSM::usart0.set(uart1_al+'0');FSM::usart0.print(" - ");
			FSM::usart0.print(uart1_array[uart1_al]);						// print string
 3a6:	90 9e       	mul	r9, r16
 3a8:	b0 01       	movw	r22, r0
 3aa:	91 9e       	mul	r9, r17
 3ac:	70 0d       	add	r23, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	6e 0d       	add	r22, r14
 3b2:	7f 1d       	adc	r23, r15
 3b4:	8d ea       	ldi	r24, 0xAD	; 173
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	42 df       	rcall	.-380    	; 0x23e <_ZN5Usart5printEPc>
			uart1_al++;														// increase line number
			recording = 1;													// and restart recording
		}// end of for

		/** Print strings on uart0 ***********************************************/
		for(uart1_al = 0; uart1_al < NB_OF_STRING; uart1_al++){
 3ba:	93 94       	inc	r9
 3bc:	f0 cf       	rjmp	.-32     	; 0x39e <_ZN10esp8266_129test_initEv+0x110>
			//FSM::usart0.set(uart1_al+'0');FSM::usart0.print(" - ");
			FSM::usart0.print(uart1_array[uart1_al]);						// print string
		}// end of for

}
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	be be       	out	0x3e, r11	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	ad be       	out	0x3d, r10	; 61
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	bf 90       	pop	r11
 3da:	af 90       	pop	r10
 3dc:	9f 90       	pop	r9
 3de:	08 95       	ret

000003e0 <_ZN10esp8266_1212test_wifi_txEPc>:

void esp8266_12::test_wifi_tx(char *string){
 3e0:	8f 92       	push	r8
 3e2:	9f 92       	push	r9
 3e4:	af 92       	push	r10
 3e6:	bf 92       	push	r11
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	4c 01       	movw	r8, r24
//
//	uart1_string[uart1_ac] = '\0';							// add '\0' char, end of string
//	uart1_ac = 0;													// reset column number
//	FSM::usart0.print(uart1_string);

}
 3fe:	ad b6       	in	r10, 0x3d	; 61
 400:	be b6       	in	r11, 0x3e	; 62
}

void esp8266_12::test_wifi_tx(char *string){
	// local variables
	unsigned char nb_string = 13;
	char uart1_array[nb_string][NB_OF_CHAR] = {0};						// use to store uart module's initializing strings
 402:	fc 01       	movw	r30, r24
 404:	83 81       	ldd	r24, Z+3	; 0x03
 406:	c8 2e       	mov	r12, r24
 408:	d1 2c       	mov	r13, r1
 40a:	2d b7       	in	r18, 0x3d	; 61
 40c:	3e b7       	in	r19, 0x3e	; 62
 40e:	9d e0       	ldi	r25, 0x0D	; 13
 410:	89 9f       	mul	r24, r25
 412:	20 19       	sub	r18, r0
 414:	31 09       	sbc	r19, r1
 416:	11 24       	eor	r1, r1
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	3e bf       	out	0x3e, r19	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	2d bf       	out	0x3d, r18	; 61
 422:	0d b7       	in	r16, 0x3d	; 61
 424:	1e b7       	in	r17, 0x3e	; 62
 426:	0f 5f       	subi	r16, 0xFF	; 255
 428:	1f 4f       	sbci	r17, 0xFF	; 255
 42a:	ed b7       	in	r30, 0x3d	; 61
 42c:	fe b7       	in	r31, 0x3e	; 62
 42e:	11 82       	std	Z+1, r1	; 0x01
 430:	c8 01       	movw	r24, r16
 432:	8c 0d       	add	r24, r12
 434:	9d 1d       	adc	r25, r13
 436:	2c e0       	ldi	r18, 0x0C	; 12
 438:	e2 2e       	mov	r14, r18
 43a:	f1 2c       	mov	r15, r1
 43c:	38 2f       	mov	r19, r24
 43e:	29 2f       	mov	r18, r25
 440:	8c 0d       	add	r24, r12
 442:	9d 1d       	adc	r25, r13
 444:	e3 2f       	mov	r30, r19
 446:	f2 2f       	mov	r31, r18
 448:	e8 17       	cp	r30, r24
 44a:	f9 07       	cpc	r31, r25
 44c:	11 f0       	breq	.+4      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 44e:	11 92       	st	Z+, r1
 450:	fb cf       	rjmp	.-10     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	ef 1a       	sub	r14, r31
 456:	f1 08       	sbc	r15, r1
 458:	89 f7       	brne	.-30     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
esp8266_12::~esp8266_12() {

}

void  esp8266_12::print(char *string){
	FSM::usart1.print(string);
 45a:	88 ea       	ldi	r24, 0xA8	; 168
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	ef de       	rcall	.-546    	; 0x23e <_ZN5Usart5printEPc>

void esp8266_12::test_wifi_tx(char *string){
	// local variables
	unsigned char nb_string = 13;
	char uart1_array[nb_string][NB_OF_CHAR] = {0};						// use to store uart module's initializing strings
	unsigned char uart1_al = 0,uart1_ac = 0;								// index for lines and colunms
 460:	90 e0       	ldi	r25, 0x00	; 0
		// sent a test
		print(string);

		/** Waiting for the char 'G' first char of "EmonESP xxx string" **********/
		while(!recording){
			if(FSM::usart1.flag_rx1 && FSM::usart1.data_udr1 == 'G')		// Test if the new char is a 'E'
 462:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 466:	88 23       	and	r24, r24
 468:	69 f0       	breq	.+26     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
 46a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_ZN5Usart9data_udr1E>
 46e:	87 34       	cpi	r24, 0x47	; 71
 470:	49 f4       	brne	.+18     	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// if right save it in the first line, first column.
 472:	f8 01       	movw	r30, r16
 474:	e9 0f       	add	r30, r25
 476:	f1 1d       	adc	r31, r1
 478:	80 83       	st	Z, r24
				uart1_ac++;													// increase the column
 47a:	9f 5f       	subi	r25, 0xFF	; 255
				recording = 1;												// we can go starting record char
				FSM::usart1.flag_rx1 = 0;									// reset the flag
 47c:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_ZN5Usart8flag_rx1E>
		while(!recording){
			if(FSM::usart1.flag_rx1 && FSM::usart1.data_udr1 == 'G')		// Test if the new char is a 'E'
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// if right save it in the first line, first column.
				uart1_ac++;													// increase the column
				recording = 1;												// we can go starting record char
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	01 c0       	rjmp	.+2      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	25 e0       	ldi	r18, 0x05	; 5
 488:	2a 95       	dec	r18
 48a:	f1 f7       	brne	.-4      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 48c:	00 00       	nop

		// sent a test
		print(string);

		/** Waiting for the char 'G' first char of "EmonESP xxx string" **********/
		while(!recording){
 48e:	88 23       	and	r24, r24
 490:	41 f3       	breq	.-48     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>

	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){						// record the 5 strings
		while(recording){												// recording to find '\r' char, end of line
			if(FSM::usart1.flag_rx1)									// if new char comes
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// Save it in the column
 492:	ec 9c       	mul	r14, r12
 494:	b0 01       	movw	r22, r0
 496:	ed 9c       	mul	r14, r13
 498:	70 0d       	add	r23, r0
 49a:	fc 9c       	mul	r15, r12
 49c:	70 0d       	add	r23, r0
 49e:	11 24       	eor	r1, r1

		char temp_conv[10];

	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){						// record the 5 strings
		while(recording){												// recording to find '\r' char, end of line
			if(FSM::usart1.flag_rx1)									// if new char comes
 4a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 4a4:	88 23       	and	r24, r24
 4a6:	d1 f0       	breq	.+52     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
			{
				uart1_array[uart1_al][uart1_ac] = FSM::usart1.data_udr1;	// Save it in the column
 4a8:	49 2f       	mov	r20, r25
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_ZN5Usart9data_udr1E>
 4b0:	f8 01       	movw	r30, r16
 4b2:	e4 0f       	add	r30, r20
 4b4:	f5 1f       	adc	r31, r21
 4b6:	e6 0f       	add	r30, r22
 4b8:	f7 1f       	adc	r31, r23
 4ba:	80 83       	st	Z, r24
				//FSM::usart0.print(itoa(NB_OF_CHAR-2,temp_conv,10));
				if( ((uart1_array[uart1_al][uart1_ac] == '\r') ||uart1_ac >= (NB_OF_CHAR-2))) recording = 0;			// if the char is '\r', stop recording
 4bc:	8d 30       	cpi	r24, 0x0D	; 13
 4be:	49 f0       	breq	.+18     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4c0:	f4 01       	movw	r30, r8
 4c2:	23 81       	ldd	r18, Z+3	; 0x03
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	22 50       	subi	r18, 0x02	; 2
 4c8:	31 09       	sbc	r19, r1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	42 17       	cp	r20, r18
 4ce:	53 07       	cpc	r21, r19
 4d0:	0c f0       	brlt	.+2      	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
 4d2:	80 e0       	ldi	r24, 0x00	; 0
				uart1_ac++;													// increase the column
 4d4:	9f 5f       	subi	r25, 0xFF	; 255
				FSM::usart1.flag_rx1 = 0;									// reset the flag
 4d6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <_ZN5Usart8flag_rx1E>
 4da:	01 c0       	rjmp	.+2      	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	f5 e0       	ldi	r31, 0x05	; 5
 4e0:	fa 95       	dec	r31
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 4e4:	00 00       	nop
		}

		char temp_conv[10];

	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){						// record the 5 strings
		while(recording){												// recording to find '\r' char, end of line
 4e6:	81 11       	cpse	r24, r1
 4e8:	db cf       	rjmp	.-74     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
			}
			_delay_us(1);												// needs do not leave the loop empty (compilation optimization)
		}// end of while


		uart1_array[uart1_al][uart1_ac] = '\0';							// add '\0' char, end of string
 4ea:	ec 9c       	mul	r14, r12
 4ec:	90 01       	movw	r18, r0
 4ee:	ed 9c       	mul	r14, r13
 4f0:	30 0d       	add	r19, r0
 4f2:	fc 9c       	mul	r15, r12
 4f4:	30 0d       	add	r19, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	f8 01       	movw	r30, r16
 4fa:	e9 0f       	add	r30, r25
 4fc:	f1 1d       	adc	r31, r1
 4fe:	e2 0f       	add	r30, r18
 500:	f3 1f       	adc	r31, r19
 502:	10 82       	st	Z, r1
 504:	22 e0       	ldi	r18, 0x02	; 2
 506:	e2 0e       	add	r14, r18
 508:	f1 1c       	adc	r15, r1
		uart1_ac = 0;													// reset column number
 50a:	90 e0       	ldi	r25, 0x00	; 0
			_delay_us(1);													// If no an 'E', delay needs do not leave the loop empty (compilation optimization)
		}

		char temp_conv[10];

	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){						// record the 5 strings
 50c:	3e e0       	ldi	r19, 0x0E	; 14
 50e:	e3 16       	cp	r14, r19
 510:	f1 04       	cpc	r15, r1
 512:	09 f0       	breq	.+2      	; 0x516 <__FUSE_REGION_LENGTH__+0x116>
 514:	be cf       	rjmp	.-132    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 516:	8d e0       	ldi	r24, 0x0D	; 13
 518:	f8 2e       	mov	r15, r24
	}// end of for

	/** Print strings on uart0 ***********************************************/
	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){
		//FSM::usart0.set(uart1_al+'0');FSM::usart0.print(" - ");
		FSM::usart0.print(uart1_array[uart1_al]);						// print string
 51a:	b8 01       	movw	r22, r16
 51c:	8d ea       	ldi	r24, 0xAD	; 173
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	8e de       	rcall	.-740    	; 0x23e <_ZN5Usart5printEPc>
 522:	fa 94       	dec	r15
 524:	0c 0d       	add	r16, r12
 526:	1d 1d       	adc	r17, r13
		uart1_al++;														// increase line number
		recording = 1;													// and restart recording
	}// end of for

	/** Print strings on uart0 ***********************************************/
	for(uart1_al = 0; uart1_al < nb_string; uart1_al++){
 528:	f1 10       	cpse	r15, r1
 52a:	f7 cf       	rjmp	.-18     	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
//
//	uart1_string[uart1_ac] = '\0';							// add '\0' char, end of string
//	uart1_ac = 0;													// reset column number
//	FSM::usart0.print(uart1_string);

}
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	be be       	out	0x3e, r11	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	ad be       	out	0x3d, r10	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	bf 90       	pop	r11
 548:	af 90       	pop	r10
 54a:	9f 90       	pop	r9
 54c:	8f 90       	pop	r8
 54e:	08 95       	ret

00000550 <main>:

#include "../lib/FSM.h"

#define PORT_LED PORTB		// define de PORT where the LED is connected

int main(){
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	00 d0       	rcall	.+0      	; 0x556 <main+0x6>
 556:	00 d0       	rcall	.+0      	; 0x558 <main+0x8>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62

	/**************************************************************************
	 * 		Ports initialization
	 **************************************************************************/

	DDRA = 0x00;		// PortA as analog inputs
 55c:	11 b8       	out	0x01, r1	; 1

	DDRB = 0xF7;		// PortB[0-2] are input, other is set to outputs, SPI will be initialise when it will be used.
 55e:	87 ef       	ldi	r24, 0xF7	; 247
 560:	84 b9       	out	0x04, r24	; 4

	DDRD= 0xFF;			// Config the port D as outputs. D0 to D3 are Usart0 and 1, they will be rewrited.
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		// Don"t start the Wifi module at the wake up. (D4-7)
 566:	1b b8       	out	0x0b, r1	; 11

	/**************************************************************************
	 * 		Initialize the final state machine (not realy use it but simpler
	 * 		to access peripherals
	 **************************************************************************/
	FSM fsm;							// Initialize FSM (use for access to peripherals)
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	b9 dd       	rcall	.-1166   	; 0xe0 <_ZN3FSMC1Ev>

	sei();								// Active globals interrupts
 56e:	78 94       	sei

	fsm.usart0.print("Initialization Windlogger test 0.0.4\r\n\r\n");		// Send string on UART0 to try it
 570:	66 e1       	ldi	r22, 0x16	; 22
 572:	71 e0       	ldi	r23, 0x01	; 1
 574:	8d ea       	ldi	r24, 0xAD	; 173
 576:	91 e0       	ldi	r25, 0x01	; 1
 578:	62 de       	rcall	.-828    	; 0x23e <_ZN5Usart5printEPc>

	fsm.timestamp = 0;		// Initialize the timestamp value ?? why not whith rtc?
 57a:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <_ZN3FSM9timestampE>
 57e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 582:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 586:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <_ZN3FSM9timestampE+0x3>

	/**************************************************************************
	 * 		Test the wifi module
	 **************************************************************************/

	fsm.usart0.print("WiFi initialization :\r\n");	// title on uart0
 58a:	6f e3       	ldi	r22, 0x3F	; 63
 58c:	71 e0       	ldi	r23, 0x01	; 1
 58e:	8d ea       	ldi	r24, 0xAD	; 173
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	55 de       	rcall	.-854    	; 0x23e <_ZN5Usart5printEPc>
						_delay_us(1);
						PORTD |= _BV(6);};

	// Module enable pin

	inline void enable(){PORTD |= _BV(4) | _BV(6);};
 594:	8b b1       	in	r24, 0x0b	; 11
 596:	80 65       	ori	r24, 0x50	; 80
 598:	8b b9       	out	0x0b, r24	; 11
	fsm.wifi.enable();		// start the module wifi

	// test the module initialization
	fsm.wifi.test_init();
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	77 de       	rcall	.-786    	; 0x28e <_ZN10esp8266_129test_initEv>

	/**************************************************************************
	 * 		looping test
	 **************************************************************************/
	fsm.usart0.print("\r\nlooping test :\r\n");
 5a0:	67 e5       	ldi	r22, 0x57	; 87
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	8d ea       	ldi	r24, 0xAD	; 173
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	4a de       	rcall	.-876    	; 0x23e <_ZN5Usart5printEPc>
	// switch on LED_SCLK
	PORT_LED |= _BV(LED_SCLK);
 5aa:	2f 9a       	sbi	0x05, 7	; 5

	fsm.usart0.print("\r\n - The green led near the usb module, is blinking?\r\n");
 5ac:	6a e6       	ldi	r22, 0x6A	; 106
 5ae:	71 e0       	ldi	r23, 0x01	; 1
 5b0:	8d ea       	ldi	r24, 0xAD	; 173
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	44 de       	rcall	.-888    	; 0x23e <_ZN5Usart5printEPc>
	 * 		Create variables and initialize them.
	 **************************************************************************/

	unsigned long int timestamp_old, waiting_10s;		// time references
	timestamp_old = fsm.timestamp;						// set value
	waiting_10s = fsm.timestamp + 10;					// set value
 5b6:	8a e0       	ldi	r24, 0x0A	; 10
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	a0 e0       	ldi	r26, 0x00	; 0
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
	/**************************************************************************
	 * 		Create variables and initialize them.
	 **************************************************************************/

	unsigned long int timestamp_old, waiting_10s;		// time references
	timestamp_old = fsm.timestamp;						// set value
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	ba 01       	movw	r22, r20

	while(1){
		/**************************************************************************
		 * 		Blinking test
		 **************************************************************************/
		if(timestamp_old!=fsm.timestamp){
 5c4:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <_ZN3FSM9timestampE>
 5c8:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 5cc:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 5d0:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
 5d4:	4c 15       	cp	r20, r12
 5d6:	5d 05       	cpc	r21, r13
 5d8:	6e 05       	cpc	r22, r14
 5da:	7f 05       	cpc	r23, r15
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <main+0xa6>

			if(PORT_LED && _BV(LED_SCLK)) PORT_LED &= ~_BV(LED_SCLK);
 5de:	25 b1       	in	r18, 0x05	; 5
 5e0:	22 23       	and	r18, r18
 5e2:	81 f1       	breq	.+96     	; 0x644 <main+0xf4>
 5e4:	2f 98       	cbi	0x05, 7	; 5
			else PORT_LED |= _BV(LED_SCLK);
			timestamp_old=fsm.timestamp;
 5e6:	c0 90 b2 01 	lds	r12, 0x01B2	; 0x8001b2 <_ZN3FSM9timestampE>
 5ea:	d0 90 b3 01 	lds	r13, 0x01B3	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 5ee:	e0 90 b4 01 	lds	r14, 0x01B4	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 5f2:	f0 90 b5 01 	lds	r15, 0x01B5	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f6:	ef e9       	ldi	r30, 0x9F	; 159
 5f8:	ff e0       	ldi	r31, 0x0F	; 15
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <main+0xaa>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0xb0>
 600:	00 00       	nop
		}

		_delay_ms(1);

		if(fsm.timestamp == waiting_10s){
 602:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <_ZN3FSM9timestampE>
 606:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 60a:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 60e:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
 612:	48 17       	cp	r20, r24
 614:	59 07       	cpc	r21, r25
 616:	6a 07       	cpc	r22, r26
 618:	7b 07       	cpc	r23, r27
 61a:	19 f0       	breq	.+6      	; 0x622 <main+0xd2>

#include "../lib/FSM.h"

#define PORT_LED PORTB		// define de PORT where the LED is connected

int main(){
 61c:	b7 01       	movw	r22, r14
 61e:	a6 01       	movw	r20, r12
 620:	d1 cf       	rjmp	.-94     	; 0x5c4 <main+0x74>
		}

		_delay_ms(1);

		if(fsm.timestamp == waiting_10s){
			fsm.wifi.test_wifi_tx("wifi:1");
 622:	61 ea       	ldi	r22, 0xA1	; 161
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	da de       	rcall	.-588    	; 0x3e0 <_ZN10esp8266_1212test_wifi_txEPc>

			waiting_10s = fsm.timestamp + 10;
 62c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_ZN3FSM9timestampE>
 630:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <_ZN3FSM9timestampE+0x1>
 634:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <_ZN3FSM9timestampE+0x2>
 638:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <_ZN3FSM9timestampE+0x3>
 63c:	0a 96       	adiw	r24, 0x0a	; 10
 63e:	a1 1d       	adc	r26, r1
 640:	b1 1d       	adc	r27, r1
 642:	ec cf       	rjmp	.-40     	; 0x61c <main+0xcc>
		 * 		Blinking test
		 **************************************************************************/
		if(timestamp_old!=fsm.timestamp){

			if(PORT_LED && _BV(LED_SCLK)) PORT_LED &= ~_BV(LED_SCLK);
			else PORT_LED |= _BV(LED_SCLK);
 644:	2f 9a       	sbi	0x05, 7	; 5
 646:	cf cf       	rjmp	.-98     	; 0x5e6 <main+0x96>

00000648 <_ZdlPv>:
	return malloc(__s);
}

void operator delete(void* __p)
{
	if (__p) free(__p);
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	09 f0       	breq	.+2      	; 0x64e <_ZdlPv+0x6>
 64c:	9f c0       	rjmp	.+318    	; 0x78c <free>
 64e:	08 95       	ret

00000650 <__tablejump2__>:
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	00 24       	eor	r0, r0
 656:	00 1c       	adc	r0, r0
 658:	0b be       	out	0x3b, r0	; 59
 65a:	07 90       	elpm	r0, Z+
 65c:	f6 91       	elpm	r31, Z
 65e:	e0 2d       	mov	r30, r0
 660:	09 94       	ijmp

00000662 <malloc>:
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	91 05       	cpc	r25, r1
 66a:	10 f4       	brcc	.+4      	; 0x670 <malloc+0xe>
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__flp>
 674:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__flp+0x1>
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	d0 e0       	ldi	r29, 0x00	; 0
 680:	30 97       	sbiw	r30, 0x00	; 0
 682:	11 f1       	breq	.+68     	; 0x6c8 <malloc+0x66>
 684:	40 81       	ld	r20, Z
 686:	51 81       	ldd	r21, Z+1	; 0x01
 688:	48 17       	cp	r20, r24
 68a:	59 07       	cpc	r21, r25
 68c:	c0 f0       	brcs	.+48     	; 0x6be <malloc+0x5c>
 68e:	48 17       	cp	r20, r24
 690:	59 07       	cpc	r21, r25
 692:	61 f4       	brne	.+24     	; 0x6ac <malloc+0x4a>
 694:	82 81       	ldd	r24, Z+2	; 0x02
 696:	93 81       	ldd	r25, Z+3	; 0x03
 698:	20 97       	sbiw	r28, 0x00	; 0
 69a:	19 f0       	breq	.+6      	; 0x6a2 <malloc+0x40>
 69c:	9b 83       	std	Y+3, r25	; 0x03
 69e:	8a 83       	std	Y+2, r24	; 0x02
 6a0:	2b c0       	rjmp	.+86     	; 0x6f8 <malloc+0x96>
 6a2:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__flp+0x1>
 6a6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__flp>
 6aa:	26 c0       	rjmp	.+76     	; 0x6f8 <malloc+0x96>
 6ac:	21 15       	cp	r18, r1
 6ae:	31 05       	cpc	r19, r1
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <malloc+0x56>
 6b2:	42 17       	cp	r20, r18
 6b4:	53 07       	cpc	r21, r19
 6b6:	18 f4       	brcc	.+6      	; 0x6be <malloc+0x5c>
 6b8:	9a 01       	movw	r18, r20
 6ba:	be 01       	movw	r22, r28
 6bc:	df 01       	movw	r26, r30
 6be:	ef 01       	movw	r28, r30
 6c0:	02 80       	ldd	r0, Z+2	; 0x02
 6c2:	f3 81       	ldd	r31, Z+3	; 0x03
 6c4:	e0 2d       	mov	r30, r0
 6c6:	dc cf       	rjmp	.-72     	; 0x680 <malloc+0x1e>
 6c8:	21 15       	cp	r18, r1
 6ca:	31 05       	cpc	r19, r1
 6cc:	09 f1       	breq	.+66     	; 0x710 <malloc+0xae>
 6ce:	28 1b       	sub	r18, r24
 6d0:	39 0b       	sbc	r19, r25
 6d2:	24 30       	cpi	r18, 0x04	; 4
 6d4:	31 05       	cpc	r19, r1
 6d6:	90 f4       	brcc	.+36     	; 0x6fc <malloc+0x9a>
 6d8:	12 96       	adiw	r26, 0x02	; 2
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	13 97       	sbiw	r26, 0x03	; 3
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	21 f0       	breq	.+8      	; 0x6ee <malloc+0x8c>
 6e6:	fb 01       	movw	r30, r22
 6e8:	93 83       	std	Z+3, r25	; 0x03
 6ea:	82 83       	std	Z+2, r24	; 0x02
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <malloc+0x94>
 6ee:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__flp+0x1>
 6f2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__flp>
 6f6:	fd 01       	movw	r30, r26
 6f8:	32 96       	adiw	r30, 0x02	; 2
 6fa:	44 c0       	rjmp	.+136    	; 0x784 <malloc+0x122>
 6fc:	fd 01       	movw	r30, r26
 6fe:	e2 0f       	add	r30, r18
 700:	f3 1f       	adc	r31, r19
 702:	81 93       	st	Z+, r24
 704:	91 93       	st	Z+, r25
 706:	22 50       	subi	r18, 0x02	; 2
 708:	31 09       	sbc	r19, r1
 70a:	2d 93       	st	X+, r18
 70c:	3c 93       	st	X, r19
 70e:	3a c0       	rjmp	.+116    	; 0x784 <malloc+0x122>
 710:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
 714:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
 718:	23 2b       	or	r18, r19
 71a:	41 f4       	brne	.+16     	; 0x72c <malloc+0xca>
 71c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 720:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 724:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <__brkval+0x1>
 728:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <__brkval>
 72c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 730:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 734:	21 15       	cp	r18, r1
 736:	31 05       	cpc	r19, r1
 738:	41 f4       	brne	.+16     	; 0x74a <malloc+0xe8>
 73a:	2d b7       	in	r18, 0x3d	; 61
 73c:	3e b7       	in	r19, 0x3e	; 62
 73e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 742:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 746:	24 1b       	sub	r18, r20
 748:	35 0b       	sbc	r19, r21
 74a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <__brkval>
 74e:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <__brkval+0x1>
 752:	e2 17       	cp	r30, r18
 754:	f3 07       	cpc	r31, r19
 756:	a0 f4       	brcc	.+40     	; 0x780 <malloc+0x11e>
 758:	2e 1b       	sub	r18, r30
 75a:	3f 0b       	sbc	r19, r31
 75c:	28 17       	cp	r18, r24
 75e:	39 07       	cpc	r19, r25
 760:	78 f0       	brcs	.+30     	; 0x780 <malloc+0x11e>
 762:	ac 01       	movw	r20, r24
 764:	4e 5f       	subi	r20, 0xFE	; 254
 766:	5f 4f       	sbci	r21, 0xFF	; 255
 768:	24 17       	cp	r18, r20
 76a:	35 07       	cpc	r19, r21
 76c:	48 f0       	brcs	.+18     	; 0x780 <malloc+0x11e>
 76e:	4e 0f       	add	r20, r30
 770:	5f 1f       	adc	r21, r31
 772:	50 93 bb 01 	sts	0x01BB, r21	; 0x8001bb <__brkval+0x1>
 776:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <__brkval>
 77a:	81 93       	st	Z+, r24
 77c:	91 93       	st	Z+, r25
 77e:	02 c0       	rjmp	.+4      	; 0x784 <malloc+0x122>
 780:	e0 e0       	ldi	r30, 0x00	; 0
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	cf 01       	movw	r24, r30
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <free>:
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	09 f4       	brne	.+2      	; 0x79a <free+0xe>
 798:	8c c0       	rjmp	.+280    	; 0x8b2 <free+0x126>
 79a:	fc 01       	movw	r30, r24
 79c:	32 97       	sbiw	r30, 0x02	; 2
 79e:	13 82       	std	Z+3, r1	; 0x03
 7a0:	12 82       	std	Z+2, r1	; 0x02
 7a2:	00 91 bc 01 	lds	r16, 0x01BC	; 0x8001bc <__flp>
 7a6:	10 91 bd 01 	lds	r17, 0x01BD	; 0x8001bd <__flp+0x1>
 7aa:	01 15       	cp	r16, r1
 7ac:	11 05       	cpc	r17, r1
 7ae:	81 f4       	brne	.+32     	; 0x7d0 <free+0x44>
 7b0:	20 81       	ld	r18, Z
 7b2:	31 81       	ldd	r19, Z+1	; 0x01
 7b4:	82 0f       	add	r24, r18
 7b6:	93 1f       	adc	r25, r19
 7b8:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
 7bc:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
 7c0:	28 17       	cp	r18, r24
 7c2:	39 07       	cpc	r19, r25
 7c4:	79 f5       	brne	.+94     	; 0x824 <free+0x98>
 7c6:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <__brkval+0x1>
 7ca:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <__brkval>
 7ce:	71 c0       	rjmp	.+226    	; 0x8b2 <free+0x126>
 7d0:	d8 01       	movw	r26, r16
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	ae 17       	cp	r26, r30
 7d8:	bf 07       	cpc	r27, r31
 7da:	50 f4       	brcc	.+20     	; 0x7f0 <free+0x64>
 7dc:	12 96       	adiw	r26, 0x02	; 2
 7de:	2d 91       	ld	r18, X+
 7e0:	3c 91       	ld	r19, X
 7e2:	13 97       	sbiw	r26, 0x03	; 3
 7e4:	ad 01       	movw	r20, r26
 7e6:	21 15       	cp	r18, r1
 7e8:	31 05       	cpc	r19, r1
 7ea:	09 f1       	breq	.+66     	; 0x82e <free+0xa2>
 7ec:	d9 01       	movw	r26, r18
 7ee:	f3 cf       	rjmp	.-26     	; 0x7d6 <free+0x4a>
 7f0:	9d 01       	movw	r18, r26
 7f2:	da 01       	movw	r26, r20
 7f4:	33 83       	std	Z+3, r19	; 0x03
 7f6:	22 83       	std	Z+2, r18	; 0x02
 7f8:	60 81       	ld	r22, Z
 7fa:	71 81       	ldd	r23, Z+1	; 0x01
 7fc:	86 0f       	add	r24, r22
 7fe:	97 1f       	adc	r25, r23
 800:	82 17       	cp	r24, r18
 802:	93 07       	cpc	r25, r19
 804:	69 f4       	brne	.+26     	; 0x820 <free+0x94>
 806:	ec 01       	movw	r28, r24
 808:	28 81       	ld	r18, Y
 80a:	39 81       	ldd	r19, Y+1	; 0x01
 80c:	26 0f       	add	r18, r22
 80e:	37 1f       	adc	r19, r23
 810:	2e 5f       	subi	r18, 0xFE	; 254
 812:	3f 4f       	sbci	r19, 0xFF	; 255
 814:	31 83       	std	Z+1, r19	; 0x01
 816:	20 83       	st	Z, r18
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	9b 81       	ldd	r25, Y+3	; 0x03
 81c:	93 83       	std	Z+3, r25	; 0x03
 81e:	82 83       	std	Z+2, r24	; 0x02
 820:	45 2b       	or	r20, r21
 822:	29 f4       	brne	.+10     	; 0x82e <free+0xa2>
 824:	f0 93 bd 01 	sts	0x01BD, r31	; 0x8001bd <__flp+0x1>
 828:	e0 93 bc 01 	sts	0x01BC, r30	; 0x8001bc <__flp>
 82c:	42 c0       	rjmp	.+132    	; 0x8b2 <free+0x126>
 82e:	13 96       	adiw	r26, 0x03	; 3
 830:	fc 93       	st	X, r31
 832:	ee 93       	st	-X, r30
 834:	12 97       	sbiw	r26, 0x02	; 2
 836:	ed 01       	movw	r28, r26
 838:	49 91       	ld	r20, Y+
 83a:	59 91       	ld	r21, Y+
 83c:	9e 01       	movw	r18, r28
 83e:	24 0f       	add	r18, r20
 840:	35 1f       	adc	r19, r21
 842:	e2 17       	cp	r30, r18
 844:	f3 07       	cpc	r31, r19
 846:	71 f4       	brne	.+28     	; 0x864 <free+0xd8>
 848:	80 81       	ld	r24, Z
 84a:	91 81       	ldd	r25, Z+1	; 0x01
 84c:	84 0f       	add	r24, r20
 84e:	95 1f       	adc	r25, r21
 850:	02 96       	adiw	r24, 0x02	; 2
 852:	11 96       	adiw	r26, 0x01	; 1
 854:	9c 93       	st	X, r25
 856:	8e 93       	st	-X, r24
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	93 81       	ldd	r25, Z+3	; 0x03
 85c:	13 96       	adiw	r26, 0x03	; 3
 85e:	9c 93       	st	X, r25
 860:	8e 93       	st	-X, r24
 862:	12 97       	sbiw	r26, 0x02	; 2
 864:	e0 e0       	ldi	r30, 0x00	; 0
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	d8 01       	movw	r26, r16
 86a:	12 96       	adiw	r26, 0x02	; 2
 86c:	8d 91       	ld	r24, X+
 86e:	9c 91       	ld	r25, X
 870:	13 97       	sbiw	r26, 0x03	; 3
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	19 f0       	breq	.+6      	; 0x87c <free+0xf0>
 876:	f8 01       	movw	r30, r16
 878:	8c 01       	movw	r16, r24
 87a:	f6 cf       	rjmp	.-20     	; 0x868 <free+0xdc>
 87c:	8d 91       	ld	r24, X+
 87e:	9c 91       	ld	r25, X
 880:	98 01       	movw	r18, r16
 882:	2e 5f       	subi	r18, 0xFE	; 254
 884:	3f 4f       	sbci	r19, 0xFF	; 255
 886:	82 0f       	add	r24, r18
 888:	93 1f       	adc	r25, r19
 88a:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
 88e:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
 892:	28 17       	cp	r18, r24
 894:	39 07       	cpc	r19, r25
 896:	69 f4       	brne	.+26     	; 0x8b2 <free+0x126>
 898:	30 97       	sbiw	r30, 0x00	; 0
 89a:	29 f4       	brne	.+10     	; 0x8a6 <free+0x11a>
 89c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <__flp+0x1>
 8a0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__flp>
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <free+0x11e>
 8a6:	13 82       	std	Z+3, r1	; 0x03
 8a8:	12 82       	std	Z+2, r1	; 0x02
 8aa:	10 93 bb 01 	sts	0x01BB, r17	; 0x8001bb <__brkval+0x1>
 8ae:	00 93 ba 01 	sts	0x01BA, r16	; 0x8001ba <__brkval>
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

000008bc <__do_global_dtors>:
 8bc:	10 e0       	ldi	r17, 0x00	; 0
 8be:	c7 e4       	ldi	r28, 0x47	; 71
 8c0:	d0 e0       	ldi	r29, 0x00	; 0
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <__do_global_dtors+0xe>
 8c4:	fe 01       	movw	r30, r28
 8c6:	c4 de       	rcall	.-632    	; 0x650 <__tablejump2__>
 8c8:	21 96       	adiw	r28, 0x01	; 1
 8ca:	c8 34       	cpi	r28, 0x48	; 72
 8cc:	d1 07       	cpc	r29, r17
 8ce:	d1 f7       	brne	.-12     	; 0x8c4 <__do_global_dtors+0x8>
 8d0:	f8 94       	cli

000008d2 <__stop_program>:
 8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <__stop_program>
