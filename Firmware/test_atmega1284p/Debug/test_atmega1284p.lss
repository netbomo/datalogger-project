
test_atmega1284p.elf:     format de fichier elf32-avr

Sections :
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .data         00000032  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800132  00800132  000005fc  2**0
                  ALLOC
  3 .stab         000015b4  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000111b  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY

Déassemblage de la section .text :

00000000 <__vectors>:
   0:	47 c0       	rjmp	.+142    	; 0x90 <__dtors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__vector_11>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ac c0       	rjmp	.+344    	; 0x1aa <__vector_20>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	ad 00       	.word	0x00ad	; ????

0000008e <__ctors_end>:
  8e:	aa 00       	.word	0x00aa	; ????

00000090 <__dtors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d0 e4       	ldi	r29, 0x40	; 64
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e6 e3       	ldi	r30, 0x36	; 54
  a4:	f5 e0       	ldi	r31, 0x05	; 5
  a6:	00 e0       	ldi	r16, 0x00	; 0
  a8:	0b bf       	out	0x3b, r16	; 59
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x14>
  ac:	07 90       	elpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 33       	cpi	r26, 0x32	; 50
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x10>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a2 e3       	ldi	r26, 0x32	; 50
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	af 33       	cpi	r26, 0x3F	; 63
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>

000000c6 <__do_global_ctors>:
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	ce e8       	ldi	r28, 0x8E	; 142
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	00 e0       	ldi	r16, 0x00	; 0
  ce:	05 c0       	rjmp	.+10     	; 0xda <__do_global_ctors+0x14>
  d0:	22 97       	sbiw	r28, 0x02	; 2
  d2:	01 09       	sbc	r16, r1
  d4:	fe 01       	movw	r30, r28
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	f2 d0       	rcall	.+484    	; 0x2be <__tablejump_elpm__>
  da:	cc 38       	cpi	r28, 0x8C	; 140
  dc:	d1 07       	cpc	r29, r17
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 07       	cpc	r16, r24
  e2:	b1 f7       	brne	.-20     	; 0xd0 <__do_global_ctors+0xa>
  e4:	98 d0       	rcall	.+304    	; 0x216 <main>
  e6:	16 c2       	rjmp	.+1068   	; 0x514 <__do_global_dtors>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <_ZN3FSMC1Ev>:

Usart FSM::usart0(0,Usart::BR_57600);


FSM::FSM(){
		TIMSK2 |= _BV(TOIE2);				// enable overflow interrupt
  ea:	e0 e7       	ldi	r30, 0x70	; 112
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
		TCNT2 = 0;
  f4:	10 92 b2 00 	sts	0x00B2, r1
		TCCR2B = _BV(CS22) | _BV(CS20); // prescaler for overload interrupt each 1 second : CS2[2:0]=101;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	80 93 b1 00 	sts	0x00B1, r24
		ASSR |=  _BV(AS2);					// Set the bit AS2 in the ASSR register to clock the timer 2 from the external crystal
  fe:	e6 eb       	ldi	r30, 0xB6	; 182
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <__vector_11>:
/**
 * \brief the timer2 is use with an external 32.768 Hz crystal to provide a RTC
 *
 * At each timer2 overflow, the uint32 timestamp is incremented
 */
ISR(TIMER2_OVF_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
	FSM::timestamp++;
 11c:	80 91 35 01 	lds	r24, 0x0135
 120:	90 91 36 01 	lds	r25, 0x0136
 124:	a0 91 37 01 	lds	r26, 0x0137
 128:	b0 91 38 01 	lds	r27, 0x0138
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	a1 1d       	adc	r26, r1
 130:	b1 1d       	adc	r27, r1
 132:	80 93 35 01 	sts	0x0135, r24
 136:	90 93 36 01 	sts	0x0136, r25
 13a:	a0 93 37 01 	sts	0x0137, r26
 13e:	b0 93 38 01 	sts	0x0138, r27
}
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_GLOBAL__sub_D__ZN3FSM9timestampE>:

#include "../lib/FSM.h"

unsigned long int FSM::timestamp = 0;

Usart FSM::usart0(0,Usart::BR_57600);
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	06 c0       	rjmp	.+12     	; 0x166 <_ZN5UsartD1Ev>

0000015a <_GLOBAL__sub_I__ZN3FSM9timestampE>:
 15a:	42 e2       	ldi	r20, 0x22	; 34
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e3       	ldi	r24, 0x32	; 50
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0c c0       	rjmp	.+24     	; 0x17e <_ZN5UsartC1Ehj>

00000166 <_ZN5UsartD1Ev>:
			break;
	}

}

Usart::~Usart() {
 166:	2a e0       	ldi	r18, 0x0A	; 10
 168:	31 e0       	ldi	r19, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	08 95       	ret

00000172 <_ZN5UsartD0Ev>:
 172:	2a e0       	ldi	r18, 0x0A	; 10
 174:	31 e0       	ldi	r19, 0x01	; 1
 176:	fc 01       	movw	r30, r24
 178:	31 83       	std	Z+1, r19	; 0x01
 17a:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
 17c:	9c c0       	rjmp	.+312    	; 0x2b6 <_ZdlPv>

0000017e <_ZN5UsartC1Ehj>:
char Usart::data_udr0 = 0;
unsigned char Usart::flag_rx0 = 0;

Usart::Usart():m_usart(255) {}

Usart::Usart(unsigned char usart, unsigned int baudrate) {
 17e:	2a e0       	ldi	r18, 0x0A	; 10
 180:	31 e0       	ldi	r19, 0x01	; 1
 182:	fc 01       	movw	r30, r24
 184:	31 83       	std	Z+1, r19	; 0x01
 186:	20 83       	st	Z, r18
	// TODO Auto-generated constructor stub

	switch (usart) {
 188:	61 11       	cpse	r22, r1
 18a:	0e c0       	rjmp	.+28     	; 0x1a8 <_ZN5UsartC1Ehj+0x2a>
		case 0:
			m_usart = usart;
 18c:	12 82       	std	Z+2, r1	; 0x02
			UBRR0 = baudrate; // set baud rate
 18e:	50 93 c5 00 	sts	0x00C5, r21
 192:	40 93 c4 00 	sts	0x00C4, r20

			UCSR0A = _BV(U2X0); // for the baud rate setting
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 c0 00 	sts	0x00C0, r24

			UCSR0B = _BV(RXCIE0) | _BV(RXEN0) |_BV(TXEN0); //enable receiver and transmitter
 19c:	88 e9       	ldi	r24, 0x98	; 152
 19e:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C = _BV(UPM01) | _BV(UPM00) | _BV(UCSZ01) | _BV(UCSZ00);	// Set frame format : 8data 2stop bit
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	80 93 c2 00 	sts	0x00C2, r24
 1a8:	08 95       	ret

000001aa <__vector_20>:
Usart::~Usart() {
	// TODO Auto-generated destructor stub
}

ISR(USART0_RX_vect)							//sous routine d'interruption lors d'une reception
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	Usart::data_udr0 = UDR0;						//récupération du registre de donnée UDR0 dans la variable globale data_udr0
 1b6:	80 91 c6 00 	lds	r24, 0x00C6
 1ba:	80 93 3a 01 	sts	0x013A, r24
	Usart::flag_rx0 = 1;					//mise à 1 du drapeau de reception pour interruption
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 39 01 	sts	0x0139, r24
}
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <_ZN5Usart3setEc>:

void Usart::set(char character){
	switch (m_usart) {
 1d0:	fc 01       	movw	r30, r24
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	81 11       	cpse	r24, r1
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <_ZN5Usart3setEc+0x14>
	case 0:
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) )
 1d8:	80 91 c0 00 	lds	r24, 0x00C0
 1dc:	85 ff       	sbrs	r24, 5
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <_ZN5Usart3setEc+0x8>
			;
		/* Put data into buffer, sends the data */
		UDR0 = character;
 1e0:	60 93 c6 00 	sts	0x00C6, r22
 1e4:	08 95       	ret

000001e6 <_ZN5Usart5printEPc>:
	default:
		break;
	}
}

void Usart::print(char* string){
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	8b 01       	movw	r16, r22
	uint8_t i = 0;
 1f4:	f1 2c       	mov	r15, r1

		while(*(string+i)!='\0')
 1f6:	f8 01       	movw	r30, r16
 1f8:	ef 0d       	add	r30, r15
 1fa:	f1 1d       	adc	r31, r1
 1fc:	60 81       	ld	r22, Z
 1fe:	66 23       	and	r22, r22
 200:	21 f0       	breq	.+8      	; 0x20a <_ZN5Usart5printEPc+0x24>
		{
			set(*(string+i));			//envoi de caractère à la volée contenu dans les adresses de data (adresses incrémentée par i)
 202:	ce 01       	movw	r24, r28
 204:	e5 df       	rcall	.-54     	; 0x1d0 <_ZN5Usart3setEc>
 206:	f3 94       	inc	r15
			i++;								//tant que la data ne contient pas '\0'
 208:	f6 cf       	rjmp	.-20     	; 0x1f6 <_ZN5Usart5printEPc+0x10>
 20a:	df 91       	pop	r29
		}
}
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	08 95       	ret

00000216 <main>:
#include <avr/interrupt.h>

#include "../lib/FSM.h"


int main(){
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	1f 92       	push	r1
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 224:	84 b9       	out	0x04, r24	; 4
	PORTA = 0x00;
 226:	12 b8       	out	0x02, r1	; 2
	PORTB = 0xF0;
 228:	80 ef       	ldi	r24, 0xF0	; 240
 22a:	85 b9       	out	0x05, r24	; 5

	FSM fsm;
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	5c df       	rcall	.-328    	; 0xea <_ZN3FSMC1Ev>
 232:	78 94       	sei

	sei();
 234:	6e e0       	ldi	r22, 0x0E	; 14

	fsm.usart0.print("Initialization Windlogger dev0.1.0");
 236:	71 e0       	ldi	r23, 0x01	; 1
 238:	82 e3       	ldi	r24, 0x32	; 50
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	d4 df       	rcall	.-88     	; 0x1e6 <_ZN5Usart5printEPc>
 23e:	10 92 35 01 	sts	0x0135, r1

	fsm.timestamp = 0;
 242:	10 92 36 01 	sts	0x0136, r1
 246:	10 92 37 01 	sts	0x0137, r1
 24a:	10 92 38 01 	sts	0x0138, r1
 24e:	c1 2c       	mov	r12, r1
 250:	d1 2c       	mov	r13, r1

	unsigned long int timestamp_old;
	timestamp_old = fsm.timestamp;
 252:	76 01       	movw	r14, r12
 254:	1f ef       	ldi	r17, 0xFF	; 255
 256:	80 91 35 01 	lds	r24, 0x0135

	while(1){

		if(timestamp_old!=fsm.timestamp){
 25a:	90 91 36 01 	lds	r25, 0x0136
 25e:	a0 91 37 01 	lds	r26, 0x0137
 262:	b0 91 38 01 	lds	r27, 0x0138
 266:	c8 16       	cp	r12, r24
 268:	d9 06       	cpc	r13, r25
 26a:	ea 06       	cpc	r14, r26
 26c:	fb 06       	cpc	r15, r27
 26e:	71 f0       	breq	.+28     	; 0x28c <main+0x76>
 270:	85 b1       	in	r24, 0x05	; 5
 272:	8f 3f       	cpi	r24, 0xFF	; 255

			if(PORTB == 0xFF) PORTB = 0x00;
 274:	11 f4       	brne	.+4      	; 0x27a <main+0x64>
 276:	15 b8       	out	0x05, r1	; 5
 278:	01 c0       	rjmp	.+2      	; 0x27c <main+0x66>
 27a:	15 b9       	out	0x05, r17	; 5
 27c:	c0 90 35 01 	lds	r12, 0x0135
			else PORTB = 0xFF;
			timestamp_old=fsm.timestamp;
 280:	d0 90 36 01 	lds	r13, 0x0136
 284:	e0 90 37 01 	lds	r14, 0x0137
 288:	f0 90 38 01 	lds	r15, 0x0138
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	8d ee       	ldi	r24, 0xED	; 237
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x7c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x86>
 29c:	00 00       	nop
 29e:	80 91 39 01 	lds	r24, 0x0139

		_delay_ms(60);


		// test UART0 by echo
		if(FSM::usart0.flag_rx0==1){
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	c1 f6       	brne	.-80     	; 0x256 <main+0x40>
 2a6:	60 91 3a 01 	lds	r22, 0x013A
			fsm.usart0.set(fsm.usart0.data_udr0);
 2aa:	82 e3       	ldi	r24, 0x32	; 50
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	90 df       	rcall	.-224    	; 0x1d0 <_ZN5Usart3setEc>
 2b0:	10 92 39 01 	sts	0x0139, r1
 2b4:	d0 cf       	rjmp	.-96     	; 0x256 <main+0x40>

000002b6 <_ZdlPv>:
	return malloc(__s);
}

void operator delete(void* __p)
{
	if (__p) free(__p);
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	09 f0       	breq	.+2      	; 0x2bc <_ZdlPv+0x6>
 2ba:	9d c0       	rjmp	.+314    	; 0x3f6 <free>
 2bc:	08 95       	ret

000002be <__tablejump_elpm__>:
 2be:	07 90       	elpm	r0, Z+
 2c0:	f6 91       	elpm	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	09 94       	ijmp

000002c6 <malloc>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	91 05       	cpc	r25, r1
 2ce:	10 f4       	brcc	.+4      	; 0x2d4 <malloc+0xe>
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	e0 91 3d 01 	lds	r30, 0x013D
 2d8:	f0 91 3e 01 	lds	r31, 0x013E
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	a0 e0       	ldi	r26, 0x00	; 0
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	30 97       	sbiw	r30, 0x00	; 0
 2e6:	39 f1       	breq	.+78     	; 0x336 <malloc+0x70>
 2e8:	40 81       	ld	r20, Z
 2ea:	51 81       	ldd	r21, Z+1	; 0x01
 2ec:	48 17       	cp	r20, r24
 2ee:	59 07       	cpc	r21, r25
 2f0:	b8 f0       	brcs	.+46     	; 0x320 <malloc+0x5a>
 2f2:	48 17       	cp	r20, r24
 2f4:	59 07       	cpc	r21, r25
 2f6:	71 f4       	brne	.+28     	; 0x314 <malloc+0x4e>
 2f8:	82 81       	ldd	r24, Z+2	; 0x02
 2fa:	93 81       	ldd	r25, Z+3	; 0x03
 2fc:	10 97       	sbiw	r26, 0x00	; 0
 2fe:	29 f0       	breq	.+10     	; 0x30a <malloc+0x44>
 300:	13 96       	adiw	r26, 0x03	; 3
 302:	9c 93       	st	X, r25
 304:	8e 93       	st	-X, r24
 306:	12 97       	sbiw	r26, 0x02	; 2
 308:	2c c0       	rjmp	.+88     	; 0x362 <malloc+0x9c>
 30a:	90 93 3e 01 	sts	0x013E, r25
 30e:	80 93 3d 01 	sts	0x013D, r24
 312:	27 c0       	rjmp	.+78     	; 0x362 <malloc+0x9c>
 314:	21 15       	cp	r18, r1
 316:	31 05       	cpc	r19, r1
 318:	31 f0       	breq	.+12     	; 0x326 <malloc+0x60>
 31a:	42 17       	cp	r20, r18
 31c:	53 07       	cpc	r21, r19
 31e:	18 f0       	brcs	.+6      	; 0x326 <malloc+0x60>
 320:	a9 01       	movw	r20, r18
 322:	db 01       	movw	r26, r22
 324:	01 c0       	rjmp	.+2      	; 0x328 <malloc+0x62>
 326:	ef 01       	movw	r28, r30
 328:	9a 01       	movw	r18, r20
 32a:	bd 01       	movw	r22, r26
 32c:	df 01       	movw	r26, r30
 32e:	02 80       	ldd	r0, Z+2	; 0x02
 330:	f3 81       	ldd	r31, Z+3	; 0x03
 332:	e0 2d       	mov	r30, r0
 334:	d7 cf       	rjmp	.-82     	; 0x2e4 <malloc+0x1e>
 336:	21 15       	cp	r18, r1
 338:	31 05       	cpc	r19, r1
 33a:	f9 f0       	breq	.+62     	; 0x37a <malloc+0xb4>
 33c:	28 1b       	sub	r18, r24
 33e:	39 0b       	sbc	r19, r25
 340:	24 30       	cpi	r18, 0x04	; 4
 342:	31 05       	cpc	r19, r1
 344:	80 f4       	brcc	.+32     	; 0x366 <malloc+0xa0>
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	9b 81       	ldd	r25, Y+3	; 0x03
 34a:	61 15       	cp	r22, r1
 34c:	71 05       	cpc	r23, r1
 34e:	21 f0       	breq	.+8      	; 0x358 <malloc+0x92>
 350:	fb 01       	movw	r30, r22
 352:	93 83       	std	Z+3, r25	; 0x03
 354:	82 83       	std	Z+2, r24	; 0x02
 356:	04 c0       	rjmp	.+8      	; 0x360 <malloc+0x9a>
 358:	90 93 3e 01 	sts	0x013E, r25
 35c:	80 93 3d 01 	sts	0x013D, r24
 360:	fe 01       	movw	r30, r28
 362:	32 96       	adiw	r30, 0x02	; 2
 364:	44 c0       	rjmp	.+136    	; 0x3ee <malloc+0x128>
 366:	fe 01       	movw	r30, r28
 368:	e2 0f       	add	r30, r18
 36a:	f3 1f       	adc	r31, r19
 36c:	81 93       	st	Z+, r24
 36e:	91 93       	st	Z+, r25
 370:	22 50       	subi	r18, 0x02	; 2
 372:	31 09       	sbc	r19, r1
 374:	39 83       	std	Y+1, r19	; 0x01
 376:	28 83       	st	Y, r18
 378:	3a c0       	rjmp	.+116    	; 0x3ee <malloc+0x128>
 37a:	20 91 3b 01 	lds	r18, 0x013B
 37e:	30 91 3c 01 	lds	r19, 0x013C
 382:	23 2b       	or	r18, r19
 384:	41 f4       	brne	.+16     	; 0x396 <malloc+0xd0>
 386:	20 91 02 01 	lds	r18, 0x0102
 38a:	30 91 03 01 	lds	r19, 0x0103
 38e:	30 93 3c 01 	sts	0x013C, r19
 392:	20 93 3b 01 	sts	0x013B, r18
 396:	20 91 00 01 	lds	r18, 0x0100
 39a:	30 91 01 01 	lds	r19, 0x0101
 39e:	21 15       	cp	r18, r1
 3a0:	31 05       	cpc	r19, r1
 3a2:	41 f4       	brne	.+16     	; 0x3b4 <malloc+0xee>
 3a4:	2d b7       	in	r18, 0x3d	; 61
 3a6:	3e b7       	in	r19, 0x3e	; 62
 3a8:	40 91 04 01 	lds	r20, 0x0104
 3ac:	50 91 05 01 	lds	r21, 0x0105
 3b0:	24 1b       	sub	r18, r20
 3b2:	35 0b       	sbc	r19, r21
 3b4:	e0 91 3b 01 	lds	r30, 0x013B
 3b8:	f0 91 3c 01 	lds	r31, 0x013C
 3bc:	e2 17       	cp	r30, r18
 3be:	f3 07       	cpc	r31, r19
 3c0:	a0 f4       	brcc	.+40     	; 0x3ea <malloc+0x124>
 3c2:	2e 1b       	sub	r18, r30
 3c4:	3f 0b       	sbc	r19, r31
 3c6:	28 17       	cp	r18, r24
 3c8:	39 07       	cpc	r19, r25
 3ca:	78 f0       	brcs	.+30     	; 0x3ea <malloc+0x124>
 3cc:	ac 01       	movw	r20, r24
 3ce:	4e 5f       	subi	r20, 0xFE	; 254
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	24 17       	cp	r18, r20
 3d4:	35 07       	cpc	r19, r21
 3d6:	48 f0       	brcs	.+18     	; 0x3ea <malloc+0x124>
 3d8:	4e 0f       	add	r20, r30
 3da:	5f 1f       	adc	r21, r31
 3dc:	50 93 3c 01 	sts	0x013C, r21
 3e0:	40 93 3b 01 	sts	0x013B, r20
 3e4:	81 93       	st	Z+, r24
 3e6:	91 93       	st	Z+, r25
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <malloc+0x128>
 3ea:	e0 e0       	ldi	r30, 0x00	; 0
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	cf 01       	movw	r24, r30
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <free>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	09 f4       	brne	.+2      	; 0x400 <free+0xa>
 3fe:	87 c0       	rjmp	.+270    	; 0x50e <free+0x118>
 400:	fc 01       	movw	r30, r24
 402:	32 97       	sbiw	r30, 0x02	; 2
 404:	13 82       	std	Z+3, r1	; 0x03
 406:	12 82       	std	Z+2, r1	; 0x02
 408:	c0 91 3d 01 	lds	r28, 0x013D
 40c:	d0 91 3e 01 	lds	r29, 0x013E
 410:	20 97       	sbiw	r28, 0x00	; 0
 412:	81 f4       	brne	.+32     	; 0x434 <free+0x3e>
 414:	20 81       	ld	r18, Z
 416:	31 81       	ldd	r19, Z+1	; 0x01
 418:	28 0f       	add	r18, r24
 41a:	39 1f       	adc	r19, r25
 41c:	80 91 3b 01 	lds	r24, 0x013B
 420:	90 91 3c 01 	lds	r25, 0x013C
 424:	82 17       	cp	r24, r18
 426:	93 07       	cpc	r25, r19
 428:	79 f5       	brne	.+94     	; 0x488 <free+0x92>
 42a:	f0 93 3c 01 	sts	0x013C, r31
 42e:	e0 93 3b 01 	sts	0x013B, r30
 432:	6d c0       	rjmp	.+218    	; 0x50e <free+0x118>
 434:	de 01       	movw	r26, r28
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	ae 17       	cp	r26, r30
 43c:	bf 07       	cpc	r27, r31
 43e:	50 f4       	brcc	.+20     	; 0x454 <free+0x5e>
 440:	12 96       	adiw	r26, 0x02	; 2
 442:	4d 91       	ld	r20, X+
 444:	5c 91       	ld	r21, X
 446:	13 97       	sbiw	r26, 0x03	; 3
 448:	9d 01       	movw	r18, r26
 44a:	41 15       	cp	r20, r1
 44c:	51 05       	cpc	r21, r1
 44e:	09 f1       	breq	.+66     	; 0x492 <free+0x9c>
 450:	da 01       	movw	r26, r20
 452:	f3 cf       	rjmp	.-26     	; 0x43a <free+0x44>
 454:	b3 83       	std	Z+3, r27	; 0x03
 456:	a2 83       	std	Z+2, r26	; 0x02
 458:	40 81       	ld	r20, Z
 45a:	51 81       	ldd	r21, Z+1	; 0x01
 45c:	84 0f       	add	r24, r20
 45e:	95 1f       	adc	r25, r21
 460:	8a 17       	cp	r24, r26
 462:	9b 07       	cpc	r25, r27
 464:	71 f4       	brne	.+28     	; 0x482 <free+0x8c>
 466:	8d 91       	ld	r24, X+
 468:	9c 91       	ld	r25, X
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	84 0f       	add	r24, r20
 46e:	95 1f       	adc	r25, r21
 470:	02 96       	adiw	r24, 0x02	; 2
 472:	91 83       	std	Z+1, r25	; 0x01
 474:	80 83       	st	Z, r24
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	8d 91       	ld	r24, X+
 47a:	9c 91       	ld	r25, X
 47c:	13 97       	sbiw	r26, 0x03	; 3
 47e:	93 83       	std	Z+3, r25	; 0x03
 480:	82 83       	std	Z+2, r24	; 0x02
 482:	21 15       	cp	r18, r1
 484:	31 05       	cpc	r19, r1
 486:	29 f4       	brne	.+10     	; 0x492 <free+0x9c>
 488:	f0 93 3e 01 	sts	0x013E, r31
 48c:	e0 93 3d 01 	sts	0x013D, r30
 490:	3e c0       	rjmp	.+124    	; 0x50e <free+0x118>
 492:	d9 01       	movw	r26, r18
 494:	13 96       	adiw	r26, 0x03	; 3
 496:	fc 93       	st	X, r31
 498:	ee 93       	st	-X, r30
 49a:	12 97       	sbiw	r26, 0x02	; 2
 49c:	4d 91       	ld	r20, X+
 49e:	5d 91       	ld	r21, X+
 4a0:	a4 0f       	add	r26, r20
 4a2:	b5 1f       	adc	r27, r21
 4a4:	ea 17       	cp	r30, r26
 4a6:	fb 07       	cpc	r31, r27
 4a8:	79 f4       	brne	.+30     	; 0x4c8 <free+0xd2>
 4aa:	80 81       	ld	r24, Z
 4ac:	91 81       	ldd	r25, Z+1	; 0x01
 4ae:	84 0f       	add	r24, r20
 4b0:	95 1f       	adc	r25, r21
 4b2:	02 96       	adiw	r24, 0x02	; 2
 4b4:	d9 01       	movw	r26, r18
 4b6:	11 96       	adiw	r26, 0x01	; 1
 4b8:	9c 93       	st	X, r25
 4ba:	8e 93       	st	-X, r24
 4bc:	82 81       	ldd	r24, Z+2	; 0x02
 4be:	93 81       	ldd	r25, Z+3	; 0x03
 4c0:	13 96       	adiw	r26, 0x03	; 3
 4c2:	9c 93       	st	X, r25
 4c4:	8e 93       	st	-X, r24
 4c6:	12 97       	sbiw	r26, 0x02	; 2
 4c8:	e0 e0       	ldi	r30, 0x00	; 0
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	9b 81       	ldd	r25, Y+3	; 0x03
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	19 f0       	breq	.+6      	; 0x4da <free+0xe4>
 4d4:	fe 01       	movw	r30, r28
 4d6:	ec 01       	movw	r28, r24
 4d8:	f9 cf       	rjmp	.-14     	; 0x4cc <free+0xd6>
 4da:	ce 01       	movw	r24, r28
 4dc:	02 96       	adiw	r24, 0x02	; 2
 4de:	28 81       	ld	r18, Y
 4e0:	39 81       	ldd	r19, Y+1	; 0x01
 4e2:	82 0f       	add	r24, r18
 4e4:	93 1f       	adc	r25, r19
 4e6:	20 91 3b 01 	lds	r18, 0x013B
 4ea:	30 91 3c 01 	lds	r19, 0x013C
 4ee:	28 17       	cp	r18, r24
 4f0:	39 07       	cpc	r19, r25
 4f2:	69 f4       	brne	.+26     	; 0x50e <free+0x118>
 4f4:	30 97       	sbiw	r30, 0x00	; 0
 4f6:	29 f4       	brne	.+10     	; 0x502 <free+0x10c>
 4f8:	10 92 3e 01 	sts	0x013E, r1
 4fc:	10 92 3d 01 	sts	0x013D, r1
 500:	02 c0       	rjmp	.+4      	; 0x506 <free+0x110>
 502:	13 82       	std	Z+3, r1	; 0x03
 504:	12 82       	std	Z+2, r1	; 0x02
 506:	d0 93 3c 01 	sts	0x013C, r29
 50a:	c0 93 3b 01 	sts	0x013B, r28
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <__do_global_dtors>:
 514:	10 e0       	ldi	r17, 0x00	; 0
 516:	ce e8       	ldi	r28, 0x8E	; 142
 518:	d0 e0       	ldi	r29, 0x00	; 0
 51a:	00 e0       	ldi	r16, 0x00	; 0
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__do_global_dtors+0x14>
 51e:	22 97       	sbiw	r28, 0x02	; 2
 520:	01 09       	sbc	r16, r1
 522:	fe 01       	movw	r30, r28
 524:	0b bf       	out	0x3b, r16	; 59
 526:	cb de       	rcall	.-618    	; 0x2be <__tablejump_elpm__>
 528:	c0 39       	cpi	r28, 0x90	; 144
 52a:	d1 07       	cpc	r29, r17
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 07       	cpc	r16, r24
 530:	b1 f7       	brne	.-20     	; 0x51e <__do_global_dtors+0xa>
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
