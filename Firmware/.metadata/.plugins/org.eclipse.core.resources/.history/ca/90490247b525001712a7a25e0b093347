/**
 *******************************************************************************
 *******************************************************************************
 *
 *	Licence :
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 
 *******************************************************************************
 *******************************************************************************
 *
 *
 *    @file   Measure.cpp
 *    @Author gilou
 *    @date   20 avr. 2017
 *    @brief  Brief description of file.
 *
 *    Detailed description of file.
 */

#include "../lib/Measure.hpp"

    // Operations
        Measure::Measure ();
        virtual void execute ();
    private :
        /**
         * \brief this method clear data value to save news
         * \return void
         */
        void clear_data_array ();
        /**
         * \brief this method initialize frequence measurement for anemometer and RPM
         * \return void
         */
        void freq_init_measurement ();
        /**
         * \brief read the windvane value en map it between 0 to 359 degres
         * \return void
         */
        void windvane_value ();
        /**
         * \brief read power value - not define realy (see emonLib)
         * \return void
         */
        void power_read_value ();
        /**
         * \brief read the temperature value from one DS18b20 sensor
         * \return void
         */
        void temperature_read_value ();
        /**
         * \brief read value from anemometer and RPM
         * \return void
         */
        void freq_read_value ();
        /**
         * \brief calcul average from the data array
         * \return void
         */
        void calc_average ();
